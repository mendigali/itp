Week 06
===============================
Problem 601:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// initialize a function which takes
// 4 integer numbers and returns
// 1 integer number that is minimum
// by using if else statements
int min(int a, int b, int c, int d) {
    if (a <= b && a <= c && a <= d) return a;
    else if (b <= a && b <= c && b <= d) return b;
    else if (c <= a && c <= b && c <= d) return c;
    else return d;
}
int main() {
    // initialize and input 4 integer numbers
    int a, b, c, d;
    cin >> a >> b >> c >> d;
    // call a function which return minimum
    // out of 4 number
    cout << min(a, b, c, d);
    return 0;
}

===============================
Problem 602:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// initialize a function which takes
// 2 numbers and returns 1 number which
// is the result of taking first 
// number to the power of second number
// by using for loop
double power(double a, int n) {
    double result = 1;
    for (int i = 1; i <= n; i++)
        result *= a;
    return result;
}
int main() {
    // initialize and input 
    // 1 double and 1 integer
    // numbers
    double a;
    int n;
    cin >> a >> n;
    // call a function which takes
    // first number and gets it 
    // to the power of second number
    cout << power(a, n);
    return 0;
}

===============================
Problem 603:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// initialize function that
// takes 2 bool variables 
// and outputs xor of this 
// variables
bool myXor (bool x, bool y) {
    return x ^ y;
}
int main() {
    // initialize and input 2 bool variables
    bool x, y;
    cin >> x >> y;
    // call function that takes 2 bool 
    // variables and xor them
    cout << myXor(x, y);
    return 0;
}

===============================
Problem 604:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// initialize function that takes 3 bool 
// variables and returns most common among them
bool election(bool x, bool y, bool z) {
    return (x + y + z) / 2;
}
int main() {
    // initialize and input 3 bool variables
    bool x, y, z;
    cin >> x >> y >> z;
    // call function that returns
    // most common among 3 variables
    cout << election(x, y, z);
    return 0;
}

===============================
Problem 605:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// initialize function which takes 2 integers
// and returns char according to which
// of them is greater by using nested ternary operator
char getSign(int x, int y) {
    return (x > y ? '>' : (x < y ? '<' : '='));
}
int main() {
    // initialize and input 2 integer variables
    int x, y;
    cin >> x >> y;
    // call a function which returns sign 
    // according to which number is greater
    cout << getSign(x, y);
    return 0;
}

===============================
Problem 606:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// initialize function which takes array size
// and turns which of them has more positive numbers
string compare(int n) {
    int arr1[100], arr2[100];
    // pos1 - number of positives in first array
    // pos2 - number of positives in second array
    int pos1 = 0, pos2 = 0;
    // get first array and count number of positives
    for (int i = 0; i < n; i++) {
        cin >> arr1[i];
        if (arr1[i] > 0) pos1++;
    }
    // get second array and count number of positives
    for (int i = 0; i < n; i++) {
        cin >> arr2[i];
        if (arr2[i] > 0) pos2++;
    }
    // compare number of positives of 2 arrays
    if (pos1 > pos2)
        return "Number of positives in the first array is greater";
    else if (pos1 < pos2)
        return "Number of positives in the second array is greater";
    else
        return "Numbers are equal";
}
int main() {
    // initialize and input integer variables
    // which will be size of arrays
    int n;
    cin >> n;
    // call function which takes array size and 
    // returns string as a result of comparison 
    // of two arrays 
    cout << compare(n);
    return 0;
}

===============================
Problem 607:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// this function takes length of 
// a row, inputs whole row and 
// returns number of positives
int countPositives(int m) {
    int result = 0;
    for (int i = 0; i < m; i++) {
        int a;
        cin >> a;
        if (a > 0) result++;
    }
    return result;
}
int main () {
    // duplicate - count number of rows with 
    // equal number of positives
    int n, m, mx = 0, row = 1, duplicate = 1;
    // input number of rows and columns
    cin >> n >> m;
    int i = 1;
    // start loop for given amount of rows
    while (i <= n) {
        // number of positives in current row
        int positives = countPositives(m);
        if (positives == mx) duplicate++;
        if (positives > mx) {
            mx = positives;
            row = i;
        }
        i++;
    }
    // if number of rows with equal number of positives
    // is equal to total number of rows, print this message
    if (duplicate == n) cout << "Numbers are equal";
    // otherwise print index of rows with maximum positives
    else cout << row;
    return 0;
}

===============================
Problem 608:
===============================
//Code with comments goes here
#include <iostream>
#include <algorithm>
using namespace std;
// function takes length of row
// and returns maximum length
// of sequence of numbers
int findSequenceLength(int m) {
    int mx = 0, length = 1, prev = 0, cur = 0;
    for (int i = 0; i < m; i++) {
        prev = cur;
        cin >> cur;
        if (prev == cur) length++;
        else {
            mx = max(mx, length);
            length = 1;
        }
    }
    return max(mx, length);
}
int main() {
    // row - index of row with maximum length of sequence
    // result - maximum length
    int n, m, result = 1, row;
    // input number of rows and columns
    cin >> n >> m;
    int i = 0;
    // start loop for number of rows
    while (i < n) {
        // length of sequence in current row
        int length = findSequenceLength(m);
        if (result < length) {
            result = length;
            row = i;
        }
        i++;
    }
    // if maximum length is 1, print message
    if (result == 1) cout << "No series of equal elements";
    // otherwise print message and index of row
    else cout << "Longest series is in the string " << row;
    return 0;
}

===============================
Problem 609:
===============================
//Code with comments goes here
#include <iostream>
#include <cstring>
using namespace std;
// this function takes array of char
// and single char
// function return number of accurances
// of given letter in the array
int countAccurance(char arr[], char ch) {
    int result = 0;
    int arrLength = strlen(arr);
    for (int i = 0; i < arrLength; i++)
        if (arr[i] == ch)
            result++;
    return result;
}
int main() {
    char ch1, ch2;
    char str1[20], str2[20];
    // input letter that will be counted
    cin >> ch1 >> ch2;
    // input strings where letters will be counted
    cin >> str1;
    cin >> str2;
    // count first letter in the first string
    cout << countAccurance(str1, ch1) << ' ' << ch1 << " characters in " << str1 << endl;
    // count second letter in the second string
    cout << countAccurance(str2, ch2) << ' ' << ch2 << " characters in " << str2;
    return 0;
}

===============================
Problem 610:
===============================
//Code with comments goes here
#include <iostream>
#include <cstring>
using namespace std;
// exactly the same function as in 609
int countAccurance(char arr[], char ch) {
    int result = 0;
    int arrLength = strlen(arr);
    for (int i = 0; i < arrLength; i++)
        if (arr[i] == ch)
            result++;
    return result;
}
int main() {
    int n;
    cin >> n;
    char letter[100];
    char word[100][20];
    // input letters and strings
    for (int i = 0; i < n; i++)
        cin >> letter[i] >> word[i];
    // loop through each element and put it in countAccurance function
    for (int i = 0; i < n; i++)
        cout << countAccurance(word[i], letter[i]) << ' ' << letter[i] << " in " << word[i] << endl;
    return 0;
}

===============================
Problem 611:
===============================
//Code with comments goes here
#include <iostream>
#include <cstring>
using namespace std;
// exactly the same function as in 609 and 610
int countAccurance(char arr[], char ch) {
    int result = 0;
    int arrLength = strlen(arr);
    for (int i = 0; i < arrLength; i++)
        if (arr[i] == ch)
            result++;
    return result;
}
int main() {
    int n;
    cin >> n;
    char letter[100];
    char word[100][20];
    for (int i = 0; i < n; i++)
        cin >> letter[i] >> word[i];
    // everything is the same as 610 except 
    // output in reverse order
    for (int i = n-1; i >= 0; i--)
        cout << countAccurance(word[i], letter[i]) << ' ' << letter[i] << " in " << word[i] << endl;
    return 0;
}

===============================
Problem 612:
===============================
//Code with comments goes here
#include <iostream>
#include <string>
using namespace std;
// this function gets char and
// makes it uppercase using ASCII code
// example: a = 97, A = 65
char makeUpperCase(char x) {
    if (x >= 'a' && x <= 'z') return x - 32;
    return x;
}
int main() {
    // create 2 strings
    // first is given, second is result
    string a, b;
    int i = 0;
    cin >> a;
    // start loop for each letter in string
    while (i < a.length()) {
        // add current letter in uppercase
        // to the back of result string
        b += makeUpperCase(a[i]);
        i++;
    }
    cout << b;
    return 0;
}

===============================
Problem 613:
===============================
//Code with comments goes here
#include <iostream>
#include <string>
using namespace std;
// this function gets char and
// changes its case using ASCII code
// if char isn't alphabet letter nothing changes
// example: a = 97, A = 65
char changeCase(char x) {
    if (x >= 'a' && x <= 'z') return x - 32;
    else if (x >= 'A' && x <= 'Z') return x + 32;
    return x;
}
int main() {
    // create 2 strings
    // first is given, second is result
    string a, b;
    int i = 0;
    cin >> a;
    // start loop for each letter in string
    while (i < a.length()) {
        // change case of current letter and add it
        // to the back of result string
        b += changeCase(a[i]);
        i++;
    }
    cout << b;
    return 0;
}

===============================
Problem 614:
===============================
//Code with comments goes here
#include <iostream>
#include <string>
using namespace std;
// this function gets char and
// changes its case using ASCII code
// if char isn't alphabet letter, 
// function return space bar ' '
// example: a = 97, A = 65
char changeCase(char x) {
    if (x >= 'a' && x <= 'z') return x - 32;
    else if (x >= 'A' && x <= 'Z') return x + 32;
    return ' ';
}
int main() {
    // create 2 strings
    // first is given, second is result
    string a, b;
    int i = 0;
    cin >> a;
    // start loop for each letter in string
    while (i < a.length()) {
        // get result of changeCase function
        char c = changeCase(a[i]);
        // if function return not space bar
        // but something else, it means that it was
        // alphabet letter, so add it to result
        if (c != ' ') b += c;
        i++;
    }
    cout << b;
    return 0;
}

===============================
Problem 615:
===============================
//Code with comments goes here
#include <iostream>
#include <cmath>
using namespace std;
// this function takes number of hours, minute, seconds
// and returns it as just seconds
int convertToSeconds(int h, int m, int s) {
    return h * 3600 + m * 60 + s;
}
// this function takes number of seconds
// and converts it to hours, minutes, seconds
void convertFromSeconds(int ss) {
    int h = ss / 3600;
    int m = ss % 3600 / 60;
    int s = ss % 3600 % 60;
    cout << h/10 << h%10 << ':' << m/10 << m%10 << ':' << s/10 << s%10;
}
int main() {
    // initialize variables for hours, minutes, seconds
    int h1, m1, s1;
    int h2, m2, s2;
    // input variables
    cin >> h1 >> m1 >> s1;
    cin >> h2 >> m2 >> s2;
    // time number 1 but converted to seconds
    int ss1 = convertToSeconds(h1, m1, s1);
    // time number 2 but converted to seconds
    int ss2 = convertToSeconds(h2, m2, s2);
    // find difference between two hours and convert
    // it back to hours, minutes, seconds
    convertFromSeconds(abs(ss1 - ss2));
    return 0;
}

===============================
Problem 616:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// this function takes number to power
int power(int a, int b) {
    int result = 1;
    for (int i = 1; i <= b; i++)
        result *= a;
    return result;
}
// this function takes length of binary number
// and binary number itself as a char array
int binaryToDecimal(int n, char binary[]) {
    // c - it will be used as power of 2
    int answer = 0, c = 0;
    // start from the right side of binary number
    // and go to the left
    for (int i = n-1; i >= 0; i--) {
        // convert current binary number from char to int
        int cur = (binary[i] == '0' ? 0 : 1);
        // if current number is 1, then add appropriate
        // power of two to the answer 
        if (cur) answer += power(2, c);
        c++;
    }
    return answer;
}
int main() {
    // initialize length of binary number
    int n;
    // this array will store binary number
    char binary[31];
    // input length and binary number
    cin >> n >> binary;
    // call function to convert from binary to decimal
    cout << binaryToDecimal(n, binary);
    return 0;
}

===============================
Problem 617:
===============================
//Code with comments goes here
#include <iostream>
#include <cmath>
using namespace std;
void solve() {
    int n, arr[100], mn = 999, pos1, pos2;
    // input array size and first element of array
    cin >> n >> arr[0];
    // start loop from the second index in array
    for (int i = 1; i < n; i++) {
        cin >> arr[i];
        // find difference between current
        // and previous elements
        int diff = abs(arr[i] - arr[i-1]);
        // if difference is less than 
        // current minimum, store indexes
        // of these elements and update minimum
        if (diff < mn) {
            pos1 = i;
            pos2 = i + 1;
            mn = diff;
        }
    }
    // also compare first and last elements in array
    if (abs(arr[0] - arr[n-1]) < mn)
        cout << "1 " << n;
    else
        cout << pos1 << ' ' << pos2;
}
int main() {
    solve();
    return 0;
}

===============================
Problem 618:
===============================
//Code with comments goes here
#include <iostream>
using namespace std;
// this function checks whether given 
// char is operator such as + - * /
// or not
bool isSign(char c) {
    char signs[] = {'+', '-', '*', '/'};
    for (int i = 0; i < 4; i++)
        if (c == signs[i])
            return true;
    return false;
}
// this function checks whether given
// char is number or not
bool isNumber(char c) {
    return (c >= '0' && c <= '9') ? true : false;
}
// this function checks given string
// for unallowed characters or repetition
// of operators multiple times in a row
bool validate(char str[], int n) {
    // loop through string by one character
    for (int i = 0; i < n; i++) {
        // check if character is allowed or not
        if (!(isSign(str[i]) || isNumber(str[i])))
            return false;
        // if current character is operator, then check chars on the left
        // and right
        if (isSign(str[i]) && !(isNumber(str[i-1]) && isNumber(str[i+1])))
            return false;
    }
    // also check first and last characters
    // and return false if it is operator
    if (isSign(str[0]) || isSign(str[n-1]))
        return false;
    return true;
}
int main() {
    int n;
    char str[1000];
    // input length and string
    cin >> n >> str;
    // if function returns true, then print YES
    // otherwise NO
    cout << (validate(str, n) ? "YES" : "NO");
    return 0;
}