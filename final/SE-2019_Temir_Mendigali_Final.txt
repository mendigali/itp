// Task 1 solution:
#include <iostream>
#include <algorithm>
using namespace std;
void countArray(int* arr, int& size)
{
    for (int i = 0; i < size; i++)
    {
        int a;
        cin >> a; // get element
        arr[a-1]++; // count number of occurances
    }
}
void printArray(int* arr, int& size)
{
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == 2) // if element occured 2 times
        {
            cout << i+1; // print element +1 because started from zero
        }
    }
        
}
int main()
{
    int n;
    cin >> n;
    // create dynamic array
    int* arr = new int[n];
    // fill array with zeros
    fill(arr, arr+n, 0);
    /* 
     * call a function which gets elements
     * one by one and counts
     * number of times that each number
     * occured in array
     */
    countArray(arr, n);
    // print element which occured exactly 2 times
    printArray(arr, n);
    // clear memory
    delete[] arr;
    return 0;
}



// Task 2 solution:
#include <iostream>
#include <string>
#include <algorithm>
#include <vector>
using namespace std;
struct Student
{
    int id;
    string name;
    int grade;
};
struct Subject
{
    int id;
    string name;
    int num_of_stud;
    Student* students;
};
// Function for comparing pairs by their second element
bool cmpPairs(pair<int, int> &a, pair<int, int> &b) 
{
    return a.second < b.second; 
}
int main()
{
    int n;
    cin >> n;
    // Structure of subjects
    Subject* subj = new Subject[n];
    /*
     * This vector pair array will store id of subject
     * and student score for that subject
     */
    vector< pair<int, int> > subid_grade;
    for (int i = 0; i < n; i++)
    {
        // input information about subject
        cin >> subj[i].id
            >> subj[i].name
            >> subj[i].num_of_stud;
        // allocate memory for number of students in the subject
        subj[i].students = new Student[subj[i].num_of_stud];
        for (int j = 0; j < subj[i].num_of_stud; j++)
        {
            // input information about each student
            cin >> subj[i].students[j].id
                >> subj[i].students[j].name
                >> subj[i].students[j].grade;
        }
    }
    // name of the student and range of 
    // grades that he/she get
    string stud_name, range;
    cin >> stud_name >> range;
    // converting grades range from string with format xxx-yyy
    // to 2 separate integers
    int dash_pos = range.find('-');
    int from = stoi(range.substr(0, dash_pos));
    int to = stoi(range.substr(dash_pos+1));
    // add subject id and grade to vector pair
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < subj[i].num_of_stud; j++)
        {
            // if condition is true then add subject id and student grade
            if (subj[i].students[j].name == stud_name && subj[i].students[j].grade >= from && subj[i].students[j].grade <= to)
            {
                subid_grade.push_back(make_pair(subj[i].id, subj[i].students[j].grade));
            }
        }
    }
    // sort pairs by grade
    sort(subid_grade.begin(), subid_grade.end(), cmpPairs);
    for (auto it : subid_grade)
    {
        // search for subject with particular id
        for (int i = 0; i < n; i++)
            if (subj[i].id == it.first)
            {
                // print the result
                cout << subj[i].id << ' '  << subj[i].name << endl;
            }
    }
    // clear memory
    for (int i = 0; i < n; i++)
    {
        delete[] subj[i].students;
    }
    delete[] subj;
    return 0;
}



// Task 3 solution:
#include <iostream>
#include <string>
using namespace std;
struct Attendance
{
    string lesson;
    string student;
    int t1;
    int t2;
};
// this function converts time from string
// in format like 12:15 to minutes in integer type
int convertTime(string time) {
    int colon_pos = time.find(':');
    int hh = stoi(time.substr(0, colon_pos));
    int mm = stoi(time.substr(colon_pos+1));
    return (hh*60 + mm);
}
int main()
{
    int n;
    cin >> n;
    Attendance* attend = new Attendance[n];
    for (int i = 0; i < n; i++)
    {
        // input data about current attendance
        string l, s, str_t1, str_t2;
        cin >> l
            >> s
            >> str_t1
            >> str_t2;
        // convert both times from string to integer
        int t1 = convertTime(str_t1);
        int t2 = convertTime(str_t2);
        for (int j = 0; j < i; j++)
        {
            // if current student is already inside attendance
            // then check his time for conflicts
            if (attend[j].student == s)
            {
                // check time 
                if ((attend[j].t1 < t1 && attend[j].t2 > t1)
                ||(attend[j].t1 < t2 && attend[j].t2 > t2))
                {
                    // if there is a conflict print student name
                    cout << s << endl;
                }
            }
        }
        // add student to the attendance
        attend[i] = {l, s, t1, t2};
    }
    // clear memory
    delete[] attend;
    return 0;
}